
/* ###################################################################################################### */
\ir './test-begin.sql'
\timing off
-- \set ECHO queries



-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 1 }———:reset
drop schema if exists X cascade;
create schema X;
-- \ir '../300-fmatic.sql'
\set filename demo-indexes-on-partial-strings.sql
\pset pager off

-- ---------------------------------------------------------------------------------------------------------
-- thx to https://stackoverflow.com/a/4565551/7568091
create function X.random_word( ¶length int ) returns text volatile parallel safe language sql as $$
  select array_to_string( array( select chr( ( 97 + round( random() * 25 ) ):: integer )
    from generate_series( 1, ¶length ) ), ''); $$;

-- ---------------------------------------------------------------------------------------------------------
create function X.split( ¶path text ) returns text[] immutable strict parallel safe language sql as $$
  select echo( '^33376^', regexp_match( ¶path, '^([^#]+)#(.+)$' ) ); $$;

-- ---------------------------------------------------------------------------------------------------------
create function X.topic( ¶path text ) returns text immutable strict parallel safe language sql as $$
  select ( X.split( ¶path ) )[ 1 ]; $$;

-- ---------------------------------------------------------------------------------------------------------
create function X.focus( ¶path text ) returns text immutable strict parallel safe language sql as $$
  select ( X.split( ¶path ) )[ 2 ]; $$;

-- ---------------------------------------------------------------------------------------------------------
create table X.paths (
  id      bigint generated by default as identity primary key,
  path    FMAT.absolute_path  not null );

-- -- ---------------------------------------------------------------------------------------------------------
-- create table X.paths (
--   id      bigint generated by default as identity primary key,
--   path    FMAT.absolute_path  not null,
--   topic   text                not null generated always as ( X.topic( path ) ) stored,
--   focus   text                not null generated always as ( X.focus( path ) ) stored );

-- create index "INDEX ON FOCUS FIELD" on X.paths ( focus );
create index "INDEX ON PATH FOCUS()" on X.paths ( X.focus( path ) );
create index "INDEX ON PATH TOPIC()" on X.paths ( X.topic( path ) );

-- ---------------------------------------------------------------------------------------------------------
insert into X.paths ( path ) select '/' || X.random_word( 5 ) || '#:' || X.random_word( 5 )
  from generate_series( 1, 3 );

-- -- .........................................................................................................
-- \echo :reverse:steel  X.paths :reset
-- select * from X.paths where focus ~ '^:ce';

-- .........................................................................................................
\echo :reverse:steel  X.paths :reset
select * from X.paths where X.focus( path ) ~ '^:c';
select * from X.paths where X.focus( path ) ~ '^:d';
select * from X.paths where X.topic( path ) ~ '^:d';
-- select * from X.paths where focus = ':cercaria';
-- explain analyze select * from X.paths order by focus;

/* ###################################################################################################### */
\echo :red ———{ :filename 10 }———:reset
\quit

-- do $$ begin perform FMAT.push_to_queue( '/apps/blink/timer/tick()' ); end; $$;



/* ====================================================================================================== */
\ir './test-perform.sql'

\pset pager on
-- select distinct xcode from FACTORS.factors order by xcode;
-- select glyph, wbf5        from FACTORS.factors            where glyph in ( '際', '祙', '祭', '⽰', '未' );
-- select * from FACTORS._010_factors;

/* ====================================================================================================== */
\ir './test-end.sql'
\quit
