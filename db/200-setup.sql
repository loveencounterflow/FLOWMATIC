

/* ###################################################################################################### */
\ir '../intershop/db/010-trm.sql'
\ir './set-signal-color.sql'
-- \ir './test-begin.sql'
-- \pset pager on
\timing off
\set filename 200-setup.sql
-- -- \set ECHO queries

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 1 }———:reset
drop schema if exists X cascade; create schema X;


-- =========================================================================================================
--
-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 2 }———:reset
create domain X.positive_integer  as integer  check ( value > 0                   );
create domain X.nonempty_text     as text     check ( value ~ '.+'                );
create domain X.component_name    as text     check ( value ~ '^°.+'              );
create domain X.verb_name         as text     check ( value ~ '^\^.+'             );
create domain X.aspect_name       as text     check ( value ~ '^:.+'              );
create domain X.topic_name        as text     check ( value ~ '^°.+'              ); -- i.e., component
create domain X.focus_name        as text     check ( value ~ '^[:^].+'           ); -- i.e., verb or aspect
create domain X.atom_name         as text     check ( value ~ '^[°^:].+'          ); -- i.e., component, verb, or aspect
create domain X.sigil             as text     check ( value ~ '^[°^:]$'           );
create domain X.sigilcombo        as text     check ( value ~ '^([°^:])|(°[^:])$' );


-- =========================================================================================================
--
-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 6 }———:reset
create table X.kinds (
    kind      X.nonempty_text   not null  unique,
    sigil     X.sigilcombo      not null  unique,
    comment   X.nonempty_text,
  primary key ( kind ) );

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 6 }———:reset
-- ### TAINT add check that sigil matches kind
create table X.atoms (
    atom      X.atom_name       not null  unique,
    kind      text              not null  references X.kinds ( kind ),
    comment   X.nonempty_text,
  primary key ( atom ) );


-- =========================================================================================================
--
-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 6 }———:reset
-- ### TAINT add constraint to check that sigils, kinds match
-- ### TAINT add constraint to check that exactly one state has dflt = true
-- ### TAINT add constraint to check that all events have dflt = false (or null)
create table X.pairs (
    topic       X.topic_name      not null  references X.atoms ( atom ),
    focus       X.focus_name      not null  references X.atoms ( atom ),
    predicate   jsonb             not null  default 'true'::jsonb,
    kind        text              not null  references X.kinds ( kind ),
    dflt        boolean           not null  default false,
    comment     X.nonempty_text,
  primary key ( topic, focus )
  -- constraint on ( topic ) check
  );

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 9 }———:reset
create table X.transition_terms (
    termid            bigint generated by default as identity primary key,
    topic             X.topic_name  not null,
    focus             X.focus_name  not null,
    predicate         jsonb         not null  default 'true'::jsonb,
  unique ( topic, focus, predicate ),
  foreign key ( topic, focus ) references X.pairs );

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 9 }———:reset
create table X.transition_clausids (
    clausid           bigint generated by default as identity primary key,
    comment           text );

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 9 }———:reset
create table X.transition_termids_and_clausids (
    termid            bigint  not null references X.transition_terms    ( termid  ),
    clausid           bigint  not null references X.transition_clausids  ( clausid ),
  primary key ( termid, clausid ) );

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 9 }———:reset
create table X.transition_phrasids (
    phrasid           bigint  generated by default as identity primary key,
    cond_clausid      bigint  not null references X.transition_clausids ( clausid ),
    actn_clausid      bigint  not null references X.transition_clausids ( clausid ),
  unique ( cond_clausid, actn_clausid ) );

-- ---------------------------------------------------------------------------------------------------------
create function X.get_last_phrasid() returns bigint volatile language sql as $$
  select max( clausid ) from X.transition_clausids limit 1; $$;

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 9 }———:reset
create view X.transition_clauses as ( select
    TRM.termid      as termid,
    IDS.clausid     as clausid,
    TRM.topic       as topic,
    TRM.focus       as focus,
    TRM.predicate   as predicate,
    CID.comment     as comment
  from X.transition_terms                     as TRM
  left join X.transition_termids_and_clausids as IDS  on ( TRM.termid = IDS.termid  )
  left join X.transition_clausids             as CID on ( IDS.clausid = CID.clausid ) )
  ;

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 9 }———:reset
create view X.transition_phrases as ( select
    cond.termid         as cond_termid,
    cond.clausid        as cond_clausid,
    actn.termid         as actn_termid,
    actn.clausid        as actn_clausid,
    cond.topic          as cond_topic,
    cond.focus          as cond_focus,
    cond.predicate      as cond_predicate,
    actn.topic          as actn_topic,
    actn.focus          as actn_focus,
    actn.predicate      as actn_predicate
    -- cond.comment       as cond_comment,
    -- actn.comment        as actn_comment
  from X.transition_clauses       as cond
  join X.transition_phrasids      as phrase on ( cond.clausid         = phrase.cond_clausid )
  left join X.transition_clauses  as actn   on ( phrase.actn_clausid  = actn.clausid )
  order by cond_clausid, cond_termid );

-- ---------------------------------------------------------------------------------------------------------
create function X._get_transition_clause_kind( cond_phrasid bigint, actn_phrasid bigint )
  returns text immutable parallel safe language sql as $$
  select
    case
      when cond_phrasid is      null and actn_phrasid is      null  then  'orphan'
      when cond_phrasid is  not null and actn_phrasid is  not null  then  'intermediate'
      when cond_phrasid is  not null                                then  'condition'
      else                                                                'action'
      end; $$;

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 9 }———:reset
create view X.transition_clauses_and_phrases as ( select
    term.termid           as termid,
    IDS.clausid           as clausid,
    cond_phrase.phrasid   as cond_phrasid,
    actn_phrase.phrasid   as actn_phrasid,
    p.phrasid             as phrasid,
    ck.kind               as kind,
    term.topic            as topic,
    term.focus            as focus,
    term.predicate        as predicate,
    CID.comment           as comment
  from X.transition_terms                     as term
  left join X.transition_termids_and_clausids as IDS  on ( term.termid = IDS.termid  )
  left join X.transition_clausids             as CID on ( IDS.clausid = CID.clausid )
  left join X.transition_phrasids             as cond_phrase on ( IDS.clausid = cond_phrase.cond_clausid )
  left join X.transition_phrasids             as actn_phrase on ( IDS.clausid = actn_phrase.actn_clausid ),
  lateral coalesce( cond_phrase.phrasid, actn_phrase.phrasid ) as p ( phrasid ),
  lateral X._get_transition_clause_kind(
    cond_phrase.phrasid,
    actn_phrase.phrasid )                     as ck ( kind ) );

-- ---------------------------------------------------------------------------------------------------------
create function X.add_transition_term( ¶topic X.topic_name, ¶focus X.focus_name, ¶predicate jsonb )
  returns bigint volatile language plpgsql as $$
  declare
    R  bigint :=  null;
  begin
    insert into X.transition_terms ( topic, focus, predicate ) values
      ( ¶topic, ¶focus, ¶predicate ) on conflict do nothing returning termid into R;
    if R is null then
      select termid from X.transition_terms where
        ( topic, focus, predicate ) = ( ¶topic, ¶focus, ¶predicate ) into R;
      end if;
    return R;
  end; $$;

-- -- ---------------------------------------------------------------------------------------------------------
-- create function X.add_transition( ¶cond_topic text, ¶cond_focus text, ¶actn_topic text, ¶actn_focus text )
--   returns void volatile language plpgsql as $$
--   declare
--   begin
--   end; $$;


-- ******************************************************************************
\echo :signal ———{ :filename 6 }———:reset
insert into X.kinds ( kind, sigil, comment ) values
  ( 'component',  '°',  'models interacting parts of the system'            ),
  ( 'verb',       '^',  'models what parts of the system can do'            ),
  ( 'aspect',     ':',  'models malleable phases of components'             ),
  ( 'event',      '°^', 'models ex- and internal actuations of the system'  ),
  ( 'state',      '°:', 'models static and dynamic postures of the system'  );

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 6 }———:reset
insert into X.atoms ( atom, kind, comment ) values
  ( '°FSM',       'component',  'pseudo-component for the automaton itself' ),
  ( ':IDLE',      'aspect',     'when the automaton is not in use'          ),
  ( ':ACTIVE',    'aspect',     'when the automaton is in use'              ),
  ( '^RESET',     'verb',       'put the automaton in its initial state'    ),
  ( '^START',     'verb',       'start the automaton'                       );

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 6 }———:reset
insert into X.pairs ( topic, focus, kind, dflt, comment ) values
  ( '°FSM',     ':IDLE',      'state',  true,    'the automaton is not in use'                ),
  ( '°FSM',     ':ACTIVE',    'state',  false,   'the automaton is in use'                    ),
  ( '°FSM',     '^RESET',     'event',  false,   'reset the automaton to its initial state'   ),
  ( '°FSM',     '^START',     'event',  false,   'start the automaton'                        );

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 10 }———:reset
do $$ begin
  perform X.add_transition_term(  '°FSM',   ':IDLE',    'true'  );
  perform X.add_transition_term(  '°FSM',   '^RESET',   'true'  );
  perform X.add_transition_term(  '°FSM',   ':ACTIVE',  'true'  );
  perform X.add_transition_term(  '°FSM',   '^START',   'true'  );
  end; $$;

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 10 }———:reset
insert into X.transition_clausids ( clausid, comment ) values
  ( 1, 'FSM initialisation conditions'  ),
  ( 2, 'FSM initialisation actions'     );

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 10 }———:reset
insert into X.transition_termids_and_clausids ( termid, clausid ) values
  ( 1, 1 ),
  ( 2, 1 ),
  ( 3, 2 ),
  ( 4, 2 );

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 10 }———:reset
insert into X.transition_phrasids ( phrasid, cond_clausid, actn_clausid ) values
  ( 1, 1, 2 );


/* ###################################################################################################### */
\echo :red ———{ :filename 13 }———:reset
\quit

/* ###################################################################################################### */
/* ###################################################################################################### */
/* ###################################################################################################### */
/* ###################################################################################################### */
/* ###################################################################################################### */
/* ###################################################################################################### */

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 9 }———:reset
create table X.transitions_and_actions (
    cond_termid     bigint  not null references X.transition_terms ( termid ),
    actn_termid     bigint  not null references X.transition_terms ( termid ),
  primary key ( cond_termid, actn_termid ) );

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 9 }———:reset
create view X.transitions as ( select
    TE.termid          as TE_termid,
    TE.topic            as TE_topic,
    TE.focus            as TE_focus,
    TE.predicate        as TE_predicate,
    TP.cond_termid  as TP_cond_termid,
    TP.actn_termid   as TP_actn_termid,
    TA.cond_termid  as TA_cond_termid,
    TA.actn_termid   as TA_actn_termid
  from X.transition_terms          as TE
  left join X.transitions_and_actions as TP on ( TE.termid = TP.cond_termid )
  left join X.transitions_and_actions as TA on ( TE.termid = TA.actn_termid )
  -- order by clausid, id
  );

-- -- ---------------------------------------------------------------------------------------------------------
-- \echo :signal ———{ :filename 9 }———:reset
-- create view X.transition_premises as ( select
--     *
--   from X.transition_terms
--   where action is not null
--   order by clausid, id );

-- -- comment on view X.transition_premises is 'lists '

-- -- ---------------------------------------------------------------------------------------------------------
-- \echo :signal ———{ :filename 9 }———:reset
-- create view X.transition_actions as ( select
--     *
--   from X.transition_terms
--   where action is null
--   order by clausid, id );

-- =========================================================================================================
--
-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 10 }———:reset
-- TAINT add constraint to ensure only events, not other pair kinds, are entered
-- OTOH should be clear from domains used for names
create table X.eventlog (
    id          bigint generated by default as identity primary key,
    t           timestamp with time zone  not null default now(),
    topic       X.component_name          not null,
    focus       X.verb_name               not null,
  foreign key ( topic, focus ) references X.pairs ( topic, focus ) );

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 11 }———:reset
create table X.statelog (
    id          bigint generated by default as identity primary key,
    t           timestamp with time zone  not null default now(),
    topic       X.component_name          not null,
    focus       X.aspect_name             not null,
  foreign key ( topic, focus ) references X.pairs ( topic, focus ) );


-- =========================================================================================================
-- INITIAL DATA
-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 6 }———:reset
insert into X.kinds ( kind, sigil, comment ) values
  ( 'component',  '°',  'models interacting parts of the system'            ),
  ( 'verb',       '^',  'models what parts of the system can do'            ),
  ( 'aspect',     ':',  'models malleable phases of components'             ),
  ( 'event',      '°^', 'models ex- and internal actuations of the system'  ),
  ( 'state',      '°:', 'models static and dynamic postures of the system'  );

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 6 }———:reset
insert into X.atoms ( atom, kind, comment ) values
  ( '°FSM',       'component',  'pseudo-component for the automaton itself' ),
  ( ':IDLE',      'aspect',     'when the automaton is not in use'          ),
  ( ':ACTIVE',    'aspect',     'when the automaton is in use'              ),
  ( '^RESET',     'verb',       'put the automaton in its initial state'    );

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 6 }———:reset
insert into X.pairs ( topic, focus, kind, dflt, comment ) values
  ( '°FSM',     ':IDLE',      'state',  true,    'the automaton is not in use'                ),
  ( '°FSM',     ':ACTIVE',    'state',  false,   'the automaton is in use'                    ),
  ( '°FSM',     '^RESET',     'event',  false,   'reset the automaton to its initial state'   );

-- ---------------------------------------------------------------------------------------------------------
\echo :signal ———{ :filename 10 }———:reset
insert into X.transition_terms ( termid, topic, focus, action ) values
  ( 1, '°FSM',  ':IDLE',    2     ),
  ( 1, '°FSM',  '^RESET',   2     ),
  ( 2, '°FSM',  ':ACTIVE',  null  );


/* ###################################################################################################### */
\echo :red ———{ :filename 13 }———:reset
\quit

